# -*- coding: utf-8 -*-

"""
testapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from testapi.api_helper import APIHelper
from testapi.configuration import Server
from testapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from testapi.http.http_method_enum import HttpMethodEnum
from testapi.models.users_response import UsersResponse
from testapi.models.users_response_1 import UsersResponse1


class APIController(BaseController):

    """A Controller to access Endpoints in the testapi API."""
    def __init__(self, config):
        super(APIController, self).__init__(config)

    def getusers(self,
                 search=None,
                 limit=None):
        """Does a GET request to /users.

        Returns a list of users, optionally filtered by search.

        Args:
            search (str, optional): Filter users by search term
            limit (int, optional): Limit the number of users returned

        Returns:
            List[UsersResponse]: Response from the API. A list of users

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/users')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UsersResponse.from_dictionary)
        ).execute()

    def createanewuser(self,
                       body):
        """Does a POST request to /users.

        Creates a user with default values if not provided.

        Args:
            body (UsersRequest): The request body parameter.

        Returns:
            UsersResponse1: Response from the API. User created successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/users')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UsersResponse1.from_dictionary)
        ).execute()
