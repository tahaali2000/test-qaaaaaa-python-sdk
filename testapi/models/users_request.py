# -*- coding: utf-8 -*-

"""
testapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from testapi.api_helper import APIHelper


class UsersRequest(object):

    """Implementation of the 'UsersRequest' model.

    Attributes:
        username (str): User's username
        age (int): User's age
        is_active (bool): Whether the user is active
        rating (float): User's rating
        signup_date (date): Signup date

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "age": 'age',
        "signup_date": 'signupDate',
        "username": 'username',
        "is_active": 'isActive',
        "rating": 'rating'
    }

    _optionals = [
        'username',
        'is_active',
        'rating',
    ]

    def __init__(self,
                 age=None,
                 signup_date=None,
                 username=APIHelper.SKIP,
                 is_active=APIHelper.SKIP,
                 rating=APIHelper.SKIP):
        """Constructor for the UsersRequest class"""

        # Initialize members of the class
        if username is not APIHelper.SKIP:
            self.username = username 
        self.age = age 
        if is_active is not APIHelper.SKIP:
            self.is_active = is_active 
        if rating is not APIHelper.SKIP:
            self.rating = rating 
        self.signup_date = signup_date 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        age = dictionary.get("age") if dictionary.get("age") else None
        signup_date = dateutil.parser.parse(dictionary.get('signupDate')).date() if dictionary.get('signupDate') else None
        username = dictionary.get("username") if dictionary.get("username") else APIHelper.SKIP
        is_active = dictionary.get("isActive") if "isActive" in dictionary.keys() else APIHelper.SKIP
        rating = dictionary.get("rating") if dictionary.get("rating") else APIHelper.SKIP
        # Return an object of this model
        return cls(age,
                   signup_date,
                   username,
                   is_active,
                   rating)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'username={(self.username if hasattr(self, "username") else None)!r}, '
                f'age={self.age!r}, '
                f'is_active={(self.is_active if hasattr(self, "is_active") else None)!r}, '
                f'rating={(self.rating if hasattr(self, "rating") else None)!r}, '
                f'signup_date={self.signup_date!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'username={(self.username if hasattr(self, "username") else None)!s}, '
                f'age={self.age!s}, '
                f'is_active={(self.is_active if hasattr(self, "is_active") else None)!s}, '
                f'rating={(self.rating if hasattr(self, "rating") else None)!s}, '
                f'signup_date={self.signup_date!s})')
